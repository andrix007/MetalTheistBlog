// <auto-generated />
using System;
using MetalTheist.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MetalTheist.Migrations
{
    [DbContext(typeof(MetalContext))]
    [Migration("20210624144605_InitialArticle")]
    partial class InitialArticle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MetalTheist.Core.ArticleStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ArticleStatistics");
                });

            modelBuilder.Entity("MetalTheist.Core.AuthorStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthorStatistics");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfRelease")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moniker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatisticsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StatisticsId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hello your computer has virus!",
                            Moniker = "HEL",
                            ShortContent = "Hello virus!",
                            Title = "Hello",
                            UploadDate = new DateTime(2021, 6, 24, 17, 46, 4, 600, DateTimeKind.Local).AddTicks(7309)
                        });
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.BandMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("BandMembers");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.BandMemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BandMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BandMemberId");

                    b.ToTable("BandMemberRole");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InnaugurationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Author", b =>
                {
                    b.HasBaseType("MetalTheist.Data.Entities.User");

                    b.Property<int?>("StatisticsId")
                        .HasColumnType("int");

                    b.HasIndex("StatisticsId");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Album", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Band", "Band")
                        .WithMany("Discography")
                        .HasForeignKey("BandId");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Article", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Article", null)
                        .WithMany("RelatedArticles")
                        .HasForeignKey("ArticleId");

                    b.HasOne("MetalTheist.Data.Entities.Author", "Author")
                        .WithMany("WrittenArticles")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MetalTheist.Core.ArticleStatistic", "Statistics")
                        .WithMany()
                        .HasForeignKey("StatisticsId");

                    b.HasOne("MetalTheist.Data.Entities.User", null)
                        .WithMany("Articles")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Band", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.User", null)
                        .WithMany("Bands")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.BandMember", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Band", "Band")
                        .WithMany("BandMembers")
                        .HasForeignKey("BandId");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.BandMemberRole", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.BandMember", null)
                        .WithMany("BandMemberRole")
                        .HasForeignKey("BandMemberId");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Comment", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("MetalTheist.Data.Entities.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("MetalTheist.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Genre", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Band", null)
                        .WithMany("Genres")
                        .HasForeignKey("BandId");

                    b.HasOne("MetalTheist.Data.Entities.Genre", null)
                        .WithMany("ParentGenres")
                        .HasForeignKey("GenreId");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Tag", b =>
                {
                    b.HasOne("MetalTheist.Data.Entities.Article", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Author", b =>
                {
                    b.HasOne("MetalTheist.Core.AuthorStatistic", "Statistics")
                        .WithMany()
                        .HasForeignKey("StatisticsId");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RelatedArticles");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Band", b =>
                {
                    b.Navigation("BandMembers");

                    b.Navigation("Discography");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.BandMember", b =>
                {
                    b.Navigation("BandMemberRole");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Genre", b =>
                {
                    b.Navigation("ParentGenres");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Bands");
                });

            modelBuilder.Entity("MetalTheist.Data.Entities.Author", b =>
                {
                    b.Navigation("WrittenArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
